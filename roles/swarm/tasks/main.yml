---
- name: 'Set the swarm group'
  set_fact:
    swarm_group: "swarm"
    # swarm_group: "server_swarm_{{ swarm_name }}"

- name: Install docker-py
  pip:
    name: docker-py
    state: present

- name: Check if "Swarm Mode" is enabled.
  shell: docker info
  changed_when: False
  register: docker_info

- name: Init "Swarm Mode" on the first node.
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and inventory_hostname == groups[swarm_group][0]"

- name: Get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: False
  register: docker_worker_token
  delegate_to: "{{ groups[swarm_group][0] }}"
  delegate_facts: True

- name: Declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: "inventory_hostname == groups[swarm_group][0]"

- name: Distribute the fact containing address of the first Swarm manager.
  set_fact:
    docker_manager_address: "{{hostvars[groups[swarm_group][0]]['docker_manager_address'] }}"
  when: "inventory_hostname != groups[swarm_group][0]"

- name: Join the pending Swarm worker nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and inventory_hostname != groups[swarm_group][0]"
