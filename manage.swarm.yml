---
# Get required swarm info from the swarm manager
# Only do this once
# verify that nodes are already in the swarm
- hosts: server_swarm_manager
  tasks:
    - name: Am I in a swarm?
      command: "docker info --format '{%raw%}{{.Swarm.LocalNodeState}}'{%endraw%}"
      become: yes
      register: is_swarm
    - name: Am I currently a manager?
      command: "docker info --format '{%raw%}{{.Swarm.ControlAvailable}}'{%endraw%}"
      become: yes
      register: is_manager
    - name: Get manager join token
      shell: "docker swarm join-token manager -q"
      register: manager_token_raw
      become: yes
      when: is_swarm.stdout == "active" and is_manager.stdout == "true"
      run_once: true
    - name: Get worker join token
      shell: "docker swarm join-token worker -q"
      register: worker_token_raw
      become: yes
      when: is_swarm.stdout == "active" and is_manager.stdout == "true"
      run_once: true
    - name: get manager IP address
      command: "docker info --format '{%raw%}{{.Swarm.NodeAddr}}'{%endraw%}"
      become: yes
      register: node_addr
      when: is_swarm.stdout == "active" and is_manager.stdout == "true"
      run_once: true
    - name: Set facts
      set_fact:
        worker_token: "{{worker_token_raw.stdout}}"
        manager_token: "{{manager_token_raw.stdout}}"
        manager_ip: "{{node_addr.stdout}}"
        manager_public_ip: "{{ansible_default_ipv4.address}}"
      when: is_swarm.stdout == "active" and is_manager.stdout == "true"
      run_once: true

# Make sure all nodes with `server_swarm` are in the swarm
# join the swarm as a worker
- hosts: server_swarm
  tasks:
    - name: Set facts
      set_fact:
        worker_token: "{{ hostvars[groups['server_swarm_manager'][0]]['worker_token'] }}"
        manager_ip: "{{ hostvars[groups['server_swarm_manager'][0]]['manager_ip'] }}"
    - name: Am I in a swarm?
      command: "docker info --format '{%raw%}{{.Swarm.LocalNodeState}}'{%endraw%}"
      become: yes
      register: is_swarm

    - name: Join the swarm
      command: "docker swarm join --token {{worker_token}} {{manager_ip}}:2377"
      become: yes
      when: is_swarm.stdout == "inactive"

# By this point we are definately joined to the swarm (as a worker by default)

# Workers:
# Demote to worker if it is a manager
- hosts: server_swarm_worker
  tasks:
    - name: What is my nodeId?
      command: "docker info --format '{%raw%}{{.Swarm.NodeID}}'{%endraw%}"
      become: yes
      register: node_id

    - name: Am I a manager?
      command: "docker info --format '{%raw%}{{.Swarm.ControlAvailable}}'{%endraw%}"
      become: yes
      register: is_manager

    - name: Demote from manager
      command: "docker node demote {{node_id.stdout}}"
      become: yes
      when: is_manager.stdout == "true"

# Managers:
# Promote to manager if it's a worker
- hosts: server_swarm_manager
  tasks:
    - name: What is my nodeId?
      command: "docker info --format '{%raw%}{{.Swarm.NodeID}}'{%endraw%}"
      become: yes
      register: node_id
    - name: Am I a manager?
      command: "docker info --format '{%raw%}{{.Swarm.ControlAvailable}}'{%endraw%}"
      become: yes
      register: is_manager
    - name: Promote to manager
      command: "docker node promote {{node_id.stdout}}"
      become: yes
      when: is_manager.stdout == "false"
      delegate_to: "{{manager_public_ip}}"

    # - name: Join the swarm
    #   shell: "docker swarm join --token {{manager_token}}"

- hosts: server_swarm_remove
  tasks:
    - name: Set facts
      set_fact:
        manager_public_ip: "{{ hostvars[groups['server_swarm_manager'][0]]['manager_public_ip'] }}"
    - name: What is my nodeId?
      command: "docker info --format '{%raw%}{{.Swarm.NodeID}}'{%endraw%}"
      become: yes
      register: node_id
    - debug:
        msg: "About to remove node: {{node_id.stdout}} (you have 10 seconds to cancel (ctrl c))"
    - wait_for:
        timeout: 10
    - name: Drain the node
      command: "docker node update --availability drain {{node_id.stdout}}"
      delegate_to: "{{manager_public_ip}}"
      become: yes
      run_once: true
    - name: Demote the node
      command: "docker node demote {{node_id.stdout}}"
      delegate_to: "{{manager_public_ip}}"
      become: yes
      run_once: true
    - name: Leave the swarm
      command: "docker swarm leave"
      become: yes
    - name: Remove the node
      command: "docker node rm {{node_id.stdout}}"
      delegate_to: "{{manager_public_ip}}"
      become: yes
      run_once: true
  # todo: remove tag: `server_swarm_remove`
  # todo: add tag: `remove`